<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_166642_subnet_ma.SubnetCalculator</api_name>
        <client_callable>true</client_callable>
        <description>Subnet calculation routines</description>
        <name>SubnetCalculator</name>
        <script><![CDATA[var SubnetCalculator = Class.create();
SubnetCalculator.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	initialize: function() {
	},
	
	isValidSubnet : function(CIDR) {
		/*
		var affectedGR = new GlideRecord(table);
		affectedGR.setLimit(1);
		affectedGR.addQuery(field, taskGR.sys_id);
		affectedGR.query();
		if (affectedGR.getRowCount() > 0)
			return true;
		
		return false;
 		*/
		if (null != CIDR && CIDR.indexOf("/") > 0){
			var IP = CIDR.substring(0,CIDR.indexOf("/"));
			var Bits = CIDR.substring(CIDR.indexOf("/")+1);
			if (this.isValidV4(IP) && Bits > 0 && Bits <= 32){
				return true;
			}
			if (this.isValidV6(IP) && Bits > 0 && Bits <= 128){
				return true;
			}
		}
		return false;
	},
	
	isValidV4 : function (ip, mask){
		
		if (ip.indexOf("/") > 0){
			ip = ip.substring(0,ip.indexOf("/")-1);
		}
		
		var ipv4 = new RegExp(/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);
		
		var ipmask = new RegExp(/^((128|192|224|240|248|252|254)\.0\.0\.0)|(255\.(((0|128|192|224|240|248|252|254)\.0\.0)|(255\.(((0|128|192|224|240|248|252|254)\.0)|255\.(0|128|192|224|240|248|252|254)))))$/);
		
		if (mask != null && mask != ""){
			return ipv4.test(ip) && ipmask.test(mask);
		}else{
			return ipv4.test(ip);
		}
	},
	
	isValidV6 : function (){
		return true;
	},
	
	getType : function (CIDR){
		//retun "IPv6";
		if (null != CIDR && CIDR.indexOf("/") > 0){
			if (this.isValidV4()){
				return "IPv4";
			}
			if (this.isValidV6()){
				return "IPv6";
			}
		}
		
		return null;
	},
	
	getIpLongInt : function (IP){
		
		if (null != IP && this.isValidV4(IP)){
			var ipArr = IP.split(".");
			var longInt = (parseInt(ipArr[0]) * Math.pow(256,3)) + (parseInt(ipArr[1]) * Math.pow(256,2)) + (parseInt(ipArr[2]) * 256) + (parseInt(ipArr[3]));
			return parseInt(longInt);
			
		}
		return null;
	},
	
	type: 'SubnetCalculator'
	
	
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-10-16 09:50:46</sys_created_on>
        <sys_id>c1f915bb4f092300436e4a318110c7f7</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>SubnetCalculator</sys_name>
        <sys_package display_value="Subnet Management" source="x_166642_subnet_ma">229c4e6f4f012300436e4a318110c7e1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Subnet Management">229c4e6f4f012300436e4a318110c7e1</sys_scope>
        <sys_update_name>sys_script_include_c1f915bb4f092300436e4a318110c7f7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-10-16 11:13:13</sys_updated_on>
    </sys_script_include>
</record_update>
